(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{254:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-redux","aria-hidden":"true"}},[t._v("#")]),t._v(" React Redux")]),t._v(" "),a("p",[a("code",[t._v("react-redux")]),t._v(" 时 Redux 官方提供的 React 绑定库。具有高效且灵活的特性。")]),t._v(" "),a("p",[t._v("需要将 React 和 Redux 搭配使用，就需要 React 组件可以根据 Redux 中存储的状态（Store）更新 View。并且可以改变 Store。其实 "),a("code",[t._v("react-redux")]),t._v(" 主要就完成了两件事：")]),t._v(" "),a("ul",[a("li",[t._v("通过将 Store 传入根组件的 Context 中，使子节点可以获取到 State")]),t._v(" "),a("li",[t._v("通过 Store.subscribe 订阅 store 的变化，更新组件")])]),t._v(" "),a("blockquote",[a("p",[t._v("另外还有对于性能的优化，减少不必要的渲染。")])]),t._v(" "),a("ul",[a("li",[t._v("Provider：接收从 Redux 而来的 Store，以供子组件使用")]),t._v(" "),a("li",[t._v("Connect：高阶组件，当组件需要获取或者想要改变 Store 的时候使用\n"),a("ul",[a("li",[t._v("mapStateToProps：获取 Store 数据，通过 Props 注入关联组件")]),t._v(" "),a("li",[t._v("mapDispatchToProps：当组件调用时使用 "),a("code",[t._v("dispatch")]),t._v(" 触发对应的 Action")]),t._v(" "),a("li",[t._v("mergeProps：可以在其中对 mapStateToProps、mapDispatchToProps 的结果进一步处理")]),t._v(" "),a("li",[t._v("options：其余配置项")])])])]),t._v(" "),a("p",[t._v("Reducer 的拆分于重构")]),t._v(" "),a("p",[t._v("随着项目越大，如果将所有状态的 reducer 全部写在一个函数中，将会 "),a("strong",[t._v("难以维护")]),t._v("；")]),t._v(" "),a("p",[t._v("可以将 reducer 进行拆分，也就是 "),a("strong",[t._v("函数分解")]),t._v("，最终再使用"),a("code",[t._v("combineReducers()")]),t._v("进行重构合并；")]),t._v(" "),a("p",[t._v("异步 Action")]),t._v(" "),a("p",[t._v("由于 Reducer 是一个严格的纯函数，因此无法在 Reducer 中进行数据的请求，需要先获取数据，再"),a("code",[t._v("dispatch(Action)")]),t._v(" 即可。")]),t._v(" "),a("p",[t._v("异步实现：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Freduxjs%2Fredux-thunk",target:"_blank",rel:"noopener noreferrer"}},[t._v("redex-thunk"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fredux-saga%2Fredux-saga",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-saga"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fredux-observable%2Fredux-observable",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux-observable"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("视图层绑定引入了几个概念：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<Provider>")]),t._v(" 组件：这个组件需要包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 "),a("code",[t._v("connect()")]),t._v(" 方法绑定 store")]),t._v(" "),a("li",[a("code",[t._v("connect()")]),t._v("：这是 react-redux 提供的一个方法。如果一个组件想要响应状态的变化，就把自己作为参数传给 "),a("code",[t._v("connect()")]),t._v(" 的结果，"),a("code",[t._v("connect()")]),t._v(" 方法会处理与 Store 绑定的细节，并通过 selector 确定该绑定 Store 中哪一部分的数据")]),t._v(" "),a("li",[a("code",[t._v("selector")]),t._v("：这是你自己编写的一个函数。这个函数声明了你的组件需要整个 Store 中哪一部分数据作为自己的 Props。")]),t._v(" "),a("li",[a("code",[t._v("dispatch")]),t._v("：每当你想要改变应用中的状态时，你就要 dispatch 一个 action，这也是唯一改变状态的方法。")])]),t._v(" "),a("h2",{attrs:{id:"provider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provider","aria-hidden":"true"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),a("blockquote",[a("p",[t._v("API 原型 "),a("code",[t._v("<Provider store>")])])]),t._v(" "),a("p",[t._v("使组件层级中的 "),a("code",[t._v("connect()")]),t._v(" 方法能够获得 Redux Store（将 Store 传递给 App 框架）。通常情况下我们需要将根组件嵌套在标签中才能使用 "),a("code",[t._v("connect()")]),t._v(" 方法。")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Provider")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n         ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppWithNavigationState")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Provider")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上述代码中我们标签包裹了根组件 "),a("code",[t._v("AppWithNavigationState")]),t._v("，然后为它设置了 Store 参数，Store（Redux Store）接受的是应用程序中功能唯一的 Redux Store 对象。")]),t._v(" "),a("h2",{attrs:{id:"connect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect","aria-hidden":"true"}},[t._v("#")]),t._v(" Connect")]),t._v(" "),a("blockquote",[a("p",[t._v("API 原型："),a("code",[t._v("connect([mapStoreToProps], [mapDispatchToProps], [mergeProps], [options])")])])]),t._v(" "),a("p",[t._v("连接 React 组件与 Redux store，连接操作会返回一个新的与 Redux store 连接的组件类，并且连接操作不会改变原来的组件类。")]),t._v(" "),a("p",[a("code",[t._v("react-redux")]),t._v(" 提供了 connect 函数，connect 是一个高阶函数，首先传入 mapStateToProps，mapDispatchToProps，然后返回一个生产 Component 的函数（wrapWithConnect），然后再将真正的 Component 作为参数传入 wrapWithComponent（MyComponent），这样就生产出一个经过包裹的 Connect 组件，如 "),a("code",[t._v("export default connect(mapStateToProps)(HomePage)")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://xzfyu.com/2018/07/08/react/react%E7%9B%B8%E5%85%B3/react-redux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Redux 源码分析"),a("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=s.exports}}]);