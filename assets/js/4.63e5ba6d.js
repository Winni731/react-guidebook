(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{185:function(t,s,a){t.exports=a.p+"assets/img/render_func_1.a555ae15.jpg"},186:function(t,s,a){t.exports=a.p+"assets/img/render_func_2.ae2b743d.jpg"},187:function(t,s,a){t.exports=a.p+"assets/img/render_func_3.57da54a5.jpg"},188:function(t,s,a){t.exports=a.p+"assets/img/render_func_4.265da68e.jpg"},263:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"渲染策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 渲染策略")]),t._v(" "),n("p",[t._v("通常一个组件要发挥作用，总是要渲染内容，"),n("code",[t._v("render()")]),t._v(" 函数并不往 DOM 树上渲染或者装载内容，它只是返回一个 JSX 描述的结构，最终由 React 来操作渲染过程。而 React 库肯定是把所有组件返回的结果综合起来，才能知道该如何产生对应的 DOM 修改。")]),t._v(" "),n("p",[t._v("当然，某些特殊组件的作用不是渲染界面，或者，组件在某些情况下选择没有东西可绘制，那就让 "),n("code",[t._v("render()")]),t._v(" 函数返回 "),n("code",[t._v("false")]),t._v(" 或 "),n("code",[t._v("null")]),t._v("，等于告诉 React ，这个组件这次不需要渲染任何 DOM 元素。")]),t._v(" "),n("p",[t._v("需要注意，"),n("code",[t._v("render()")]),t._v(" 函数应该是一个纯函数，完全根据 "),n("code",[t._v("this.state")]),t._v(" 和 "),n("code",[t._v("this.props")]),t._v(" 来决定返回的结果，而且不要产生任何副作用。在 "),n("code",[t._v("render()")]),t._v(" 函数中调用 "),n("code",[t._v("this.setState")]),t._v(" 毫无疑问是错误的，因为一个纯函数不应该引起状态的改变。")]),t._v(" "),n("p",[n("code",[t._v("render()")]),t._v(" 函数当且仅当下列两种情况才会被调用：")]),t._v(" "),n("ul",[n("li",[t._v("组件初始化")]),t._v(" "),n("li",[t._v("组件的 "),n("code",[t._v("props")]),t._v(" 或 "),n("code",[t._v("state")]),t._v(" 发生变化")])]),t._v(" "),n("p",[t._v("虽然组件的 "),n("code",[t._v("render()")]),t._v(" 函数只在上述 2 种情况下才发生调用，但有时 "),n("strong",[n("code",[t._v("props")]),t._v("的改变却很难察觉到")]),t._v("。比如组件的父级组件如果调用 "),n("code",[t._v("render()")]),t._v(" 函数，则该组件的 "),n("code",[t._v("props")]),t._v(" 一定会发生改变，虽然该 "),n("code",[t._v("props")]),t._v(" 与之前的未变化前的 "),n("code",[t._v("props")]),t._v(" 的属性和值都没有改变，该这个 "),n("code",[t._v("props")]),t._v(" 对象的地址却发生了变化。")]),t._v(" "),n("p",[t._v("所以，当父组件的 "),n("code",[t._v("render()")]),t._v(" 函数被调用时，会触发 "),n("code",[t._v("componentWillReceiveProps()")]),t._v(" 和 "),n("code",[t._v("shouldComponentUpdate()")]),t._v("，在里面可以比较下 "),n("code",[t._v("this.props")]),t._v(" 和 "),n("code",[t._v("nextProps")]),t._v("，可以发现两个对象其实真的是分别的两个对象而已。")]),t._v(" "),n("p",[t._v("值得注意的是，父组件调用了 "),n("code",[t._v("render()")]),t._v(" 函数，子组件一定也会调用其 "),n("code",[t._v("render()")]),t._v(" 函数，但我在上面的三种情况并没有列出，主要是因为，父组件调用其 "),n("code",[t._v("render()")]),t._v(" 函数，会改变子组件的 "),n("code",[t._v("props")]),t._v(" 对象的地址，所以也可以被归纳在第二种情况下。")]),t._v(" "),n("h2",{attrs:{id:"渲染过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 渲染过程")]),t._v(" "),n("p",[n("code",[t._v("render()")]),t._v(" 函数的渲染分为初始化渲染和更新渲染。初始化渲染就是就是在页面初始化的时候调用根组件下所有组件的 "),n("code",[t._v("render()")]),t._v(" 方法。")]),t._v(" "),n("p",[t._v("如下图，一个 DOM 树表示根组件与各组件之间的联系，绿色表示已经渲染的。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(185),alt:"渲染过程1"}})]),t._v(" "),n("p",[t._v("现在讲的这种情况，如果我们只需要对某一个子组件进行更新，如图绿色代表的是需要更新的子组件：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(186),alt:"渲染过程2"}})]),t._v(" "),n("p",[t._v("而该子组件依靠于父组件传过来的 "),n("code",[t._v("props")]),t._v(" 进行更新渲染，因此，我们的理想状态就是只更新此子组件与其父组件这条路径，如图绿色所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(187),alt:"渲染过程"}})]),t._v(" "),n("p",[t._v("然而，由于最上层的根组件需要重新执行 "),n("code",[t._v("render()")]),t._v("，必定导致其所有子组件都要重新 "),n("code",[t._v("render()")]),t._v("，再将生成的虚拟 DOM 进行对比，如果不变则不更新真实的 DOM 树。即使有些组件的并没有改变，没有导致视图改变的 "),n("code",[t._v("props")]),t._v(" 改变，但是也要重新执行 "),n("code",[t._v("render()")]),t._v(" 对虚拟 DOM 树进行对比，因为 React 难以置信简单地将默认行为设计为每次都重新执行 "),n("code",[t._v("render()")]),t._v(" 生成新的虚拟 DOM 进行对比，因为在 shouldComponentUpdate 非方法里面默认是返回 "),n("code",[t._v("true")]),t._v("，这样的对比明显是浪费的。如图黄色代表浪费的 "),n("code",[t._v("render()")]),t._v("：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(188),alt:"渲染过程4"}})]),t._v(" "),n("p",[n("strong",[t._v("⚠️ 注意：")])]),t._v(" "),n("ul",[n("li",[t._v("执行了 "),n("code",[t._v("render()")]),t._v(" 方法不代表会更新 DOM 树，在 React 当中你使用了 "),n("code",[t._v("setState")]),t._v(" 更新了 "),n("code",[t._v("state")]),t._v(" 或者改变了传入的 "),n("code",[t._v("props")]),t._v("，都会执行 "),n("code",[t._v("render()")]),t._v(" 方法，执行了"),n("code",[t._v("render()")]),t._v(" 方法以后，才会生成 DOM 树进行对比，如果 DOM 有差异才会进行构建新的渲染树，更新对应的 DOM，否则，不会更新。因此，生成虚拟 DOM 树进行对比是在 "),n("code",[t._v("render()")]),t._v(" 函数执行了之后进行，而不是执行之前。")]),t._v(" "),n("li",[t._v("拆分组件有助于性能优化。组件拆分了，各组件之间的耦合性小了，某个子组件需要更新的时候，牵涉到其他的组件就少，就能减少牵一发而动全身这种情况。")])]),t._v(" "),n("h2",{attrs:{id:"渲染优化策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染优化策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 渲染优化策略")]),t._v(" "),n("h3",{attrs:{id:"不要在-render-函数中绑定值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不要在-render-函数中绑定值","aria-hidden":"true"}},[t._v("#")]),t._v(" 不要在 "),n("code",[t._v("render()")]),t._v(" 函数中绑定值")]),t._v(" "),n("p",[t._v("假设你有一个项目列表，每个项目都传递一个唯一的参数到父方法。为了绑定参数，你可能会这么做：")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommentItem")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("likeComment")]),n("span",{pre:!0,attrs:{class:"token script language-javascript"}},[n("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("likeComment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),n("p",[t._v("这个问题会导致每次父组件 "),n("code",[t._v("render()")]),t._v(" 方法被调用时，一个新的函数被创建，已将其传入 "),n("code",[t._v("likeComment")]),t._v("。这会有一个改变每个子组件 "),n("code",[t._v("props")]),t._v(" 的副作用，它将会造成他们全部重新渲染，即时数据本身没有发生改变。")]),t._v(" "),n("p",[t._v("为了解决这个问题，只需要将父组件的原型方法的引用传递给子组件。子组件的 "),n("code",[t._v("likeComment")]),t._v(" 属性将总是有相同的引用，这样就不会造成不必要的重新渲染。")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommentItem")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("likeCommet")]),n("span",{pre:!0,attrs:{class:"token script language-javascript"}},[n("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("likeComment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("userId")]),n("span",{pre:!0,attrs:{class:"token script language-javascript"}},[n("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),n("p",[t._v("然后再子组件中创建一个引用了传入属性的类方法：")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommentItem")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PureComponent")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleLike")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("likeCommet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"不要再-render-函数里派生数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不要再-render-函数里派生数据","aria-hidden":"true"}},[t._v("#")]),t._v(" 不要再 "),n("code",[t._v("render()")]),t._v(" 函数里派生数据")]),t._v(" "),n("p",[t._v("考虑一下你的配置组件将从一系列文章中展示用户最喜欢的十篇文章。")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" posts "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" topTen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" posts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("likes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("likes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("每次组件重新渲染时 "),n("code",[t._v("topTen")]),t._v(" 都将有一个新的引用，即使 "),n("code",[t._v("posts")]),t._v(" 没有改变并且派生数据也是相同的。这将造成列表不必要的重新渲染。")]),t._v(" "),n("p",[t._v("你可以通过缓存你的派生数据来解决这个问题。例如，设置派生数据在你的组件"),n("code",[t._v("state")]),t._v("中，仅当 "),n("code",[t._v("posts")]),t._v(" 更新时它才更新。")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillMount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTopTenPosts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillReceiveProps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextProps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTopTenPosts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTopTenPosts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("posts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    topTen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" posts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("likes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("likes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果你正在使用 Redux，可以考虑使用 "),n("a",{attrs:{href:"https://github.com/reduxjs/reselect",target:"_blank",rel:"noopener noreferrer"}},[t._v("reselect"),n("OutboundLink")],1),t._v(" 来创建 "),n("code",[t._v("selectors")]),t._v(" 来组合和缓存派生数据。")])])},[],!1,null,null,null);s.default=e.exports}}]);