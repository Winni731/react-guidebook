(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{205:function(t,a,s){t.exports=s.p+"assets/img/redux_1.47dead50.jpg"},206:function(t,a,s){t.exports=s.p+"assets/img/redux-model.d8ef5489.jpg"},214:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),n("blockquote",[n("p",[t._v("Redux is a predictable state container for JavaScript apps")]),t._v(" "),n("p",[t._v("Redux 是针对 JavaScript 应用的可预测状态容器")])]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("可预测的（Predictable）")]),t._v("：因为 Redux 用了 Reducer 与纯函数（Pure Function）的概念，每个新的 State 都会由旧的 State 创建一个全新的 State，这样可以作所谓的时光旅行调试。")]),t._v(" "),n("li",[n("strong",[t._v("状态容器（State Container）")]),t._v("：State 是集中在单一个对象树状结构下的单一 Store，Store 即是应用程序凌虚（App Domain）的状态集合")]),t._v(" "),n("li",[n("strong",[t._v("JavaScript 应用")]),t._v("：这说明 Redux 并非单指设计给 React 使用的，它是独立的一个函数库，可通用于各种功能 JavaScript 应用")])]),t._v(" "),n("p",[t._v("通过一张图看 Redux 如何简化状态管理。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(205),alt:"Redux State"}})]),t._v(" "),n("p",[t._v("Redux 是一个 "),n("strong",[t._v("数据管理中心")]),t._v("，提供可预测化的状态管理，可以让你构建一致化的应用，运行于不同的环境（客户端、服务端、原生应用），并且易于测试。")]),t._v(" "),n("p",[t._v("Redux 参考了 Flux 的架构思想，对 Flux 中冗余部分（如 Dispatcher）进行简化，同时将 Elm 语言中函数式编程的思想融入其中。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(206),alt:"redux-model"}})]),t._v(" "),n("h2",{attrs:{id:"三大原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三大原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 三大原则")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("单一数据源")]),t._v("：整个应用只有唯一的状态树，也就是所有 State 最终维护在一个根级 Store 中。")]),t._v(" "),n("li",[n("strong",[t._v("状态只读")]),t._v("：为了保证状态的可控性，最好的方式就是监控状态的变化。\n"),n("ul",[n("li",[t._v("Redux Store 中的数据无法被直接修改。")]),t._v(" "),n("li",[t._v("严格控制修改的执行。")])])]),t._v(" "),n("li",[n("strong",[t._v("纯函数")]),t._v("：规定只能通过一个纯函数（Reducer）来描述修改。")])]),t._v(" "),n("h3",{attrs:{id:"单一数据源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源","aria-hidden":"true"}},[t._v("#")]),t._v(" 单一数据源")]),t._v(" "),n("p",[n("strong",[t._v("整个应用的状态数据被储存在一棵 Object Tree 中，并且只存在于唯一一个 Store 中。")])]),t._v(" "),n("p",[t._v("在传统的 MVC 架构中，我们可以根据需要创建无数个 Model，而 Model 之间可以互相监听、 触发事件甚至循环或嵌套触发事件，这些在 Redux 中都是不允许的。")]),t._v(" "),n("p",[t._v("因为在 Redux 的思想里，一个应用永远只有唯一的数据源。我们的第一反应可能是：如果有一个复杂应用，强制要求唯一的数据源岂不是会产生一个特别庞大的 JavaScript 对象。")]),t._v(" "),n("p",[t._v("实际上，使用单一数据源的好处在于整个应用状态都保存在一个对象中，这样我们随时可以提取出整个应用的状态进行持久化（比如实现一个针对整个应用的即时保存功能）。此外，这样的设计也为服务端渲染提供了可能。")]),t._v(" "),n("p",[t._v("至于我们担心的数据源对象过于庞大的问题，可通过了解 Redux 提供的工具函数 "),n("code",[t._v("combineReducers")]),t._v(" 是如何化解的。")]),t._v(" "),n("blockquote",[n("p",[t._v("📌 Flux 可能有多个 Store（区别于 Flux 的 Store，Redux 的 State 不会存放逻辑，操作数据在 Reducer 中处理。）")])]),t._v(" "),n("h3",{attrs:{id:"状态只读"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#状态只读","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态只读")]),t._v(" "),n("p",[n("strong",[t._v("只能通过触发事件（也就是触发 Action）来产生新的状态数据，Action 是一个用于描述已发生事件的普通对象。")])]),t._v(" "),n("p",[t._v("这一点和 Flux 的思想不谋而合，不同的是在 Flux 中，因为 Store 没有 "),n("code",[t._v("setter")]),t._v(" 而限制了我们直接修改应用状态的能力，而在 Redux 中，这样的限制被执行得更加彻底，因为我们压根没有 Store。")]),t._v(" "),n("p",[t._v("在 Redux 中，我们并不会自己用代码来定义一个 Store。取而代之的是，我们定义一个 Reducer， 它的功能是根据当前触发的 Action 对当前应用的 State 进行迭代，这里我们并没有直接修改应用的 State，而是返回了一份全新的状态。")]),t._v(" "),n("p",[t._v("Redux 提供的 "),n("code",[t._v("createStore")]),t._v(" 方法会根据 Reducer 生成 Store。最后，我们可以利用 "),n("code",[t._v("store.dispatch")]),t._v(" 方法来达到修改状态的目的。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("store"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'COMPLETE_TODO'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SET_VISIBILITY_FILTER'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  filter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHOW_COMPELETED'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"纯函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#纯函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 纯函数")]),t._v(" "),n("p",[n("strong",[t._v("在 Reducer 中指定状态数据转换的逻辑。")])]),t._v(" "),n("p",[n("strong",[t._v("纯函数：")])]),t._v(" "),n("ul",[n("li",[t._v("相同的输入，结果始终相同")]),t._v(" "),n("li",[t._v("不对外部环境进行操作")])]),t._v(" "),n("p",[t._v("在 Redux 里，我们通过定义 Reducer 来确定状态的修改，而每一个 Reducer 都是纯函数，这意味着它没有副作用，即接受一定的输入，必定会得到一定的输出。")]),t._v(" "),n("p",[t._v("这样设计的好处不仅在于 Reducer 里对状态的修改变得简单、纯粹、可测试，更有意思的是， Redux 利用每次新返回的状态生成酷炫的时间旅行（time travel）调试方式，让跟踪每一次因为触发 Action 而改变状态的结果成为了可能。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("visibilityFilter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SHOW_ALL'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SET_VISIBILITY_FILTER'")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("todos")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_TODO'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    completed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'COMPLTE_TODO'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("todo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" todo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        completed"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" todo\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" combineReducers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" createStore "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reducer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("combineReducers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" visibilityFilter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" todos "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" store "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reducer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("strong",[t._v("为什么需要使用纯函数？")])]),t._v(" "),n("p",[t._v("因为 Redux 的 Store 设计，并不是原本 Flux 架构的 Store，而是 ReducerStore，这个 ReducerStore 是一个在 Flux 中的 Store 的进化版，在说明中它有一个叫做 reduce 的方法。")]),t._v(" "),n("h2",{attrs:{id:"基本组成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本组成","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本组成")]),t._v(" "),n("h3",{attrs:{id:"store"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#store","aria-hidden":"true"}},[t._v("#")]),t._v(" Store")]),t._v(" "),n("p",[n("strong",[t._v("Store")]),t._v("：应用程序的数据集合，并包含了所有对数据的变动方法。")]),t._v(" "),n("p",[t._v("通过 "),n("code",[t._v("redux")]),t._v(" 的 "),n("code",[t._v("createStore")]),t._v(" API 生成 Store，该方法可传三个参数：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("reducer")]),t._v("：")]),t._v(" "),n("li",[n("code",[t._v("preloadedstate")]),t._v("：State 的初始值")]),t._v(" "),n("li",[n("code",[t._v("enhancer")]),t._v("：")])]),t._v(" "),n("p",[t._v("返回值为对象类型，具有以下属性：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("getState")]),t._v("：获取 state")]),t._v(" "),n("li",[n("code",[t._v("dispatch")]),t._v("：触发 action，更新 state")]),t._v(" "),n("li",[n("code",[t._v("subscribe")]),t._v("：订阅数据变更，注册监听器")]),t._v(" "),n("li",[n("code",[t._v("replaceReducer")]),t._v("：")]),t._v(" "),n("li",[n("code",[t._v("[$$observable]")]),t._v("：")])]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Reducer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initStore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reducer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fooApp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialstate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" SET_VISIBIlity_FILTER\n      \t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("aasign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          visibilityFitter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" action "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"action"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#action","aria-hidden":"true"}},[t._v("#")]),t._v(" Action")]),t._v(" "),n("p",[t._v("Action 是把数据从应用传到 Store 的有效载荷。它是 Store 数据的唯一来源，也就是说要改变 Store 中的 State 就需要触发一个 Action。")]),t._v(" "),n("p",[t._v("Action 本质上是一个普通的 JavaScript 对象，action 内必须使用一个字符串类型 type 字段来表示将要执行的动作，除了 type 字段外，action 对象的结构完全由你来决定。多数情况下，type 会被定义成字符串常量。当应用规模越来越大时，建议用单独的模块或文件来存放 action type。")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Common Action")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" action "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_LIST'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'list-item-1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Usage")]),t._v("\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通常为了便于调用，会有一个 Action 创建函数 action creator")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" action "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_LIST'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用就会变成")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'list-item-1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("使用单独的模块或文件来定义 action type 常量并不必须的，甚至根本不需要定义。对于小应用来说，使用字符串做 action type 更方便些。不过，在大型应用中把它们显式地定义成常量还是利大于弊。")])]),t._v(" "),n("h3",{attrs:{id:"action-creator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#action-creator","aria-hidden":"true"}},[t._v("#")]),t._v(" Action Creator")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addToDo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_TODO'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("这样将使 action 创建函数更容易被移动和测试。")]),t._v(" "),n("h3",{attrs:{id:"reducer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reducer","aria-hidden":"true"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),n("p",[t._v("reducer 是根据 action 修改 store 将其转变成下一个 state，记住 actions 只描述了有事情发生了这一事实，并没有描述应用如何更新 state。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("preState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" newState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("保持 Reducer 纯净非常重要。永远不要在 Reducer 里做这些操作：")]),t._v(" "),n("ul",[n("li",[t._v("修改传入参数")]),t._v(" "),n("li",[t._v("执行有副作用、如 API 请求和路由跳转")]),t._v(" "),n("li",[t._v("调用非纯函数，如 "),n("code",[t._v("Date.now()")]),t._v(" 和 "),n("code",[t._v("Math.random()")])])]),t._v(" "),n("blockquote",[n("p",[t._v("Reducer 是纯函数它仅仅用于计算下一个 State。它应该是完全可预测的：多次传入相同的输入必须产出相同的输出，它不应该有副作用，如 API 调用或路由跳转。这些应该在 dispatch action 前发生。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reducer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("todoApp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SET_VISIBILITY_FILTER")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Obejct"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        visibilityFilter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("filter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("不要修改 State\n"),n("ul",[n("li",[t._v("使用 Object.assign 新建一个副本。不能这样使用 "),n("code",[t._v("Object.assign(state, { visibilityFilter: action.filter })")]),t._v("，因为它会改变第一参数的值。你必须把第一个参数设置为空对象。")]),t._v(" "),n("li",[t._v("你也可以开启对 ES7 提案对象展开运算符的支持，从而使用 "),n("code",[t._v("{...state, visibilityFilter: action.filter}")]),t._v(" 达到相同的目的")])])]),t._v(" "),n("li",[t._v("在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。")])]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// A normal Reducer")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" initList "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListReducer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ADD_LIST'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("⚠️ "),n("strong",[t._v("注意事项：")])]),t._v(" "),n("ul",[n("li",[t._v("遵守数据不可变原则，不能直接修改 State，而是返回一个新对象")]),t._v(" "),n("li",[t._v("默认情况下需要返回原数据，避免数据被清空")]),t._v(" "),n("li",[t._v("最好设置初始值，便于应用的初始化及数据稳定")])]),t._v(" "),n("h2",{attrs:{id:"工作流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),n("ol",[n("li",[t._v("用户（操作 View）发出 Action，发出方式就用到了 dispatch 方法")]),t._v(" "),n("li",[t._v("然后，Store 自动调用 Reducer，并且传入两个参数（当前 State 和收到 Action），Reducer 会返回新的 State，如果有 Middleware，Store 会将当前 State 和收到的 Action 传递给 Middleware，Middleware 会调用 Reducer 然后返回新的 State")]),t._v(" "),n("li",[t._v("State 一旦有变化，Store 就会调用监听函数，来更新 View")])]),t._v(" "),n("h2",{attrs:{id:"优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),n("h3",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),n("ul",[n("li",[t._v("可预测：始终有一个唯一准确的数据源（single source of truth）即 Store，因此不存在如何将当前状态 Store 与动作和应用的其他部分同步的问题")]),t._v(" "),n("li",[t._v("易维护：具备可预测的结果和严格的组织结构让代码更容易维护")]),t._v(" "),n("li",[t._v("易测试：编写可测试代码的首要准则是编写可以仅做一件事并且独立的小函数（single responsibility principle），Redux 的代码几乎全部都是这样的函数：短小、纯粹、分离")])]),t._v(" "),n("h3",{attrs:{id:"缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺陷","aria-hidden":"true"}},[t._v("#")]),t._v(" 缺陷")]),t._v(" "),n("ul",[n("li",[t._v("一个组件所需要的数据，必须由父组件传过来，而不能像 Flux 中直接 从 Store 取。")]),t._v(" "),n("li",[t._v("当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会 re-render，可能会有效率影响，或者需要写复杂的 "),n("code",[t._v("shouldComponentUpdate")]),t._v(" 进行判断。")])]),t._v(" "),n("h2",{attrs:{id:"redux-和-flux-对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redux-和-flux-对比","aria-hidden":"true"}},[t._v("#")]),t._v(" Redux 和 Flux 对比")]),t._v(" "),n("p",[t._v("Redux 是 Flux 架构思想的实践方案，同时又在其基础上进行改进。Redux 承载了 Flux 单向数据流、Store 是唯一的数据源的思想。")]),t._v(" "),n("ul",[n("li",[t._v("Redux 中没有 Dispatcher：它使用 Store 的 Store.dispatch 方法来把 action 传给 Store，由于所有的 action 处理都会经过这个 Store.dispatch 方法，所以在 Redux 中很容易实现 Middleware 机制。Middleware 可以让你在 reducer 执行与执行后进行拦截并插入代码，来达到操作 action 和 Store 的目的，这样一来很容易实现灵活的日志打印、错误收集、API 请求、路由等操作。")]),t._v(" "),n("li",[t._v("Redux 只有一个 Store：Flux 中允许有多个 Store，但是 Redux 只允许有一个，相较于多个 Store 的 Flux，一个 Store 更加清晰，并易于管理")])]),t._v(" "),n("blockquote",[n("p",[t._v("Redux 和 Flux 最大的不同是 Redux 没有 dispatcher 且不支持多个 Store。Redux 只有一个单一的 store 和一个根级的 reducer 函数（reducer），随着应用不断变大，我们需要将根级的 reducer 拆成多个小的 reducers，分别独立地操作 state 树的不同部分，而不是添加新的 stores。")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Flux")]),t._v(" "),n("th",[t._v("Redux")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Store 包含状态和更改逻辑")]),t._v(" "),n("td",[t._v("Store 和更改逻辑是分开的")])]),t._v(" "),n("tr",[n("td",[t._v("有多个 Store")]),t._v(" "),n("td",[t._v("只有一个 Store")])]),t._v(" "),n("tr",[n("td",[t._v("所有 Store 都互不影响且是平级的")]),t._v(" "),n("td",[t._v("带有分层 reducer 的单一 Store")])]),t._v(" "),n("tr",[n("td",[t._v("有单一调度器")]),t._v(" "),n("td",[t._v("没有调度器的概念")])]),t._v(" "),n("tr",[n("td",[t._v("React 组件订阅 Store")]),t._v(" "),n("td",[t._v("容器组件是有联系的")])]),t._v(" "),n("tr",[n("td",[t._v("状态是可变的")]),t._v(" "),n("td",[t._v("状态是不可改变的")])])])]),t._v(" "),n("h2",{attrs:{id:"为什么要用-redux？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-redux？","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么要用 Redux？")]),t._v(" "),n("p",[t._v("随着 JavaScript 应用越来越大，越来越复杂，我们需要管理的 State 变得越来越多。这些 State 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等。")]),t._v(" "),n("p",[t._v("管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 的变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。当系统变得错综复杂时，想重现问题或者添加新功能就会变得非常复杂。")]),t._v(" "),n("p",[t._v("虽然 React 试图在试图层禁止异步和直接操作 DOM 来解决这个问题。美中不足的是，React 依旧把处理 State 中数据的问题留给了你。Redux 就是为了帮你解决这个问题的。")]),t._v(" "),n("p",[t._v("Redux 应用中所有的 State 都以一个对象树的形式储存在一个单一的 Store 中，唯一改变 State 的办法是触发 action，action 是一个描述发生了什么的对象。为了描述 action 如何改变 State 树，你需要编写 reducers。")]),t._v(" "),n("p",[t._v("🌰 "),n("strong",[t._v("标准示例：")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createStore "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数\n * 描述了 action 如何把 state 转变成下一个 state\n *\n * state 的形式取决于你，可以是基本类型、数组、对象\n * 当 state 修改时需要返回全新的对象，而不是修改传入的参数\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类（helper）\n * 根据不同的约定（如方法映射）来判断，只要适用于你的项目就可以了\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("counter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'INCREMENT'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DECREMENT'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 Redux Store 来存放应用状态")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// API 是 { subscribe, dispatch, getState }")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" store "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以手动订阅更新，也可以事件绑定到视图层")]),t._v("\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 改变内部 state 唯一方法是 dispatch 一个 action")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// action 可以被序列化，用日记记录和储存下来，后期还可以回放的方式执行")]),t._v("\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'INCREMENT'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'INCREMENT'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nstore"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DECREMENT'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),n("h2",{attrs:{id:"异步数据流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步数据流","aria-hidden":"true"}},[t._v("#")]),t._v(" 异步数据流")]),t._v(" "),n("ul",[n("li",[t._v("redux-thunk")]),t._v(" "),n("li",[t._v("redux-promise")]),t._v(" "),n("li",[t._v("redux-saga")]),t._v(" "),n("li",[t._v("redux-persist：支持 Store 本地持久化")]),t._v(" "),n("li",[t._v("redux-observable：实现可取消的 action")])]),t._v(" "),n("hr"),t._v(" "),n("p",[n("strong",[t._v("参考资料：")])]),t._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"https://github.com/camsong/redux-in-chinese",target:"_blank",rel:"noopener noreferrer"}},[t._v("📖 Redux 中文文档"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://github.com/WisestCoder/blog/issues/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 源码分析与设计思路分析"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26426054",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 单页应用的数据流方案探索"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/16061",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 概念之一：Redux 简介"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/16062",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 概念之二：Redux 的三大原则"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/16063",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 概念之三：Action 与 ActionCreator"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/16064",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 概念之四：Reducer 与纯函数"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://www.imooc.com/article/16065",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 Redux 概念之五：Redux 套用七步骤"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://testerhome.com/topics/8032",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何在 React+Redux 的项目中更优雅的实现前端自动化测试"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[n("a",{attrs:{href:"https://tech.meituan.com/2017/07/14/redux-design-code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux 从设计到源码"),n("OutboundLink")],1)])])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/53599723",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex、Flux、Redux、Redux-saga、Dva、MobX"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/75696114",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flux、Redux、Vuex、MobX 总结（概念篇）"),n("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=e.exports}}]);