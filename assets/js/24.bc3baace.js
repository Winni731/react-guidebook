(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{234:function(e,a,r){"use strict";r.r(a);var t=r(0),n=Object(t.a)({},function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"redux-saga"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-saga","aria-hidden":"true"}},[e._v("#")]),e._v(" Redux Saga")]),e._v(" "),r("p",[e._v("Redux Saga 是一个 Redux 中间件，用来帮你管理程序的副作用。或者更直接一点，主要是用来处理异步 action。")]),e._v(" "),r("p",[e._v("Redux 中间件说白了就是在 action 被传递到 reducer 之前新进行了一次拦截，然后启动异步任务，等异步任务执行完成后再发送一个新的 action，调用 reducer 修改状态数据。")]),e._v(" "),r("p",[e._v("左边的蓝圈圈里就是一堆 saga，它们需要和外部进行异步 I/O 交互，等交互完成后再修改 Store 中的状态数据。redux-saga 就是一个帮你管理这堆 saga 的管家，那么它跟其他的中间件实现有什么不同呢？它使用了 ES6 中 Generator 函数语法。")]),e._v(" "),r("p",[e._v("可以看到，Generator 函数的写法基本上和同步调用完全一样了，唯一的区别是 function 后面有个星号，另外函数调用之前需要加上一个 yield 关键字。")]),e._v(" "),r("hr"),e._v(" "),r("p",[r("strong",[e._v("参考资料：")])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA4NjcyMDYzMg==&mid=2451805550&idx=1&sn=84c84d73789b960f845515d701a6e0d2&chksm=88135c79bf64d56fb27009192ec3d724645a1d375b9006b7c09bad0a2aa1a3446f823e90d928&scene=0&xtrack=1",target:"_blank",rel:"noopener noreferrer"}},[e._v("redux-saga 化异步为同步"),r("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);